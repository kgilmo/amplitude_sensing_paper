//put standard inline routines here

//calculate corrected pi times for use with floppingFits
//var sf_f0 = sf_fitParam_f0;
//var sf_pi = sf_fitParam_tpi*(1+sf_fitParam_tphi/Pi);
//var sf_pio2 = sf_fitParam_tpi*(0.5+sf_fitParam_tphi/Pi);

//calculate corrected pi times for use with housekeping%npulse
var sf_f0 = sf_fitParam_f0;
var sf_pi = sf_fitParam_tpi;
var sf_pio2 = sf_pi/2.0;
//sf_fitParam_tpio2;
//sf_pi/2.0;

//below is Joe's simple ddssel()
@inline ddssel(ddsnum)
  pulse wait minsetselt setsel(($ddsnum));
  pulse wait mindelayt;
  var t=t+TT(minsetselt)+TT(mindelayt);
@end

@inline setddsf(ddsnum,freq,phase)
  inline ddssel($ddsnum);
  pulse wait minsetrft setrf($freq,$phase);
  pulse wait mindelayt;
  var t=t+TT(minsetrft)+TT(mindelayt);
@end

//ODF pulse
@inline odfPulse(dfkHz,tau, phi)
	//set Raman AO frequency
	inline setddsf(ddsramdf,raman_f210+$dfkHz/1000.0,$phi);
	@if(pdq_wfm_sw_odf == 0 )  //no PDQ pulse shaping -- usual
		pulse swbothraman ($tau);
		var t=t+TT(($tau));
	@endif
	@if(pdq_wfm_sw_odf == 1) //use PDQ for pulse shaping
		inline with_pdq_pulse_odf($tau);
	@endif
@end

// ELECTRON SPIN FLIP
@inline sf_sw_on()
	pulse swsf on;
@end
@inline sf_sw_off()
	pulse swsf off;
@end
@inline sf_dds_pre(af54,aphi54)
	var aaf54 = ($af54);
	var aaphi54 = ($aphi54);
	//new for AMC
	var freq_amc = sf_base_f + aaf54/sf_phase_divide;
	var phi_amc = aaphi54/sf_phase_divide;
	var sf_pulseOff_df_amc = sf_pulseOff_df/sf_phase_divide;

	inline setddsf(ddssf, freq_amc, phi_amc);
	//wait for AMC to settle
	inline a_nopulse(sf_prePulseDelay_t);
@end
@inline sf_pulse(af56,at56,aphi56)
	var aat56 = ($at56);
	var aaf56 = ($af56);
	var aaphi56 = ($aphi56);

	inline sf_dds_pre( aaf56, aaphi56);

	@if(pdq_wfm_sw_vdi == 0)
		inline sf_sw_on();
		inline a_nopulse(aat56);
		inline sf_sw_off();
	@endif
	@if(pdq_wfm_sw_vdi == 1)
		inline sf_sw_on();
		inline with_pdq_vdi_pulse(aat56);
		inline sf_sw_off();
	@endif

	inline sf_dds_post( aaf56, aaphi56);
@end
@inline sf_dds_post(af60,aphi60)
	var aaf60 = ($af60);
	var aaphi60 = ($aphi60);
	//new for AMC
	var sf_pulseOff_df_amc = sf_pulseOff_df/sf_phase_divide;
	var freq_amc_det = sf_base_f + aaf60/sf_phase_divide + sf_pulseOff_df_amc;
	//tune off resonance at end
	inline setddsf(ddssf, freq_amc_det, aaphi60);
@end


//Spin flip pulse
// @inline sfPulseNoDet(freq,tau,phi)
// 	//new for AMC
// 	var freq_amc = sf_base_f+$freq/sf_phase_divide;
// 	var phi_amc = $phi/sf_phase_divide;
// 	var sf_pulseOff_df_amc = sf_pulseOff_df/sf_phase_divide;
//
// 	inline setddsf(ddssf, freq_amc, phi_amc);
// 	//wait for AMC to settle
// 	pulse nopulse sf_prePulseDelay_t;
// 	var t=t+TT(sf_prePulseDelay_t);
// 	//expose ions to microwaves by toggling pin diode
// 	pulse swsf ($tau);
// 	var t=t+TT($tau);
// @end

//ODF using "walsh" spin echo
@inline odfWalsh1(local_walsh_t,local_nrep,local_raman_df)
	//check that freq of permantly detuned DDS is set
	inline setddsf(ddssfdf, sf_f0+sf_pulseOff_df, 0);

		inline setddsf(ddsramdf,raman_f210+$local_raman_df/1000,0);
		pulse swbothraman $local_walsh_t;
		inline setddsf(ddsramdf,raman_f210+$local_raman_df/1000,Pi);
		pulse swbothraman $local_walsh_t;

@end

@inline odfWalsh2(local_walsh_t,local_nrep,local_raman_df)
	//check that freq of permantly detuned DDS is set
	inline setddsf(ddssfdf, sf_f0+sf_pulseOff_df, 0);

		inline setddsf(ddsramdf,raman_f210+$local_raman_df/1000,0);
		pulse swbothraman $local_walsh_t;
		inline setddsf(ddsramdf,raman_f210+$local_raman_df/1000,Pi);
		pulse swbothraman $local_walsh_t;
		inline setddsf(ddsramdf,raman_f210+$local_raman_df/1000,0);
		pulse swbothraman $local_walsh_t;
		inline setddsf(ddsramdf,raman_f210+$local_raman_df/1000,Pi);
		pulse swbothraman $local_walsh_t;

@end

@inline odfWalsh3(local_walsh_t,local_nrep,local_raman_df)
	//check that freq of permantly detuned DDS is set
	inline setddsf(ddssfdf, sf_f0+sf_pulseOff_df, 0);
	block repeat($local_nrep)
	{
		inline setddsf(ddsramdf,raman_f210+$local_raman_df/1000,0);
		pulse swbothraman $local_walsh_t;
		inline setddsf(ddsramdf,raman_f210+$local_raman_df/1000,Pi);
		pulse swbothraman 2*$local_walsh_t;
		inline setddsf(ddsramdf,raman_f210+$local_raman_df/1000,0);
		pulse swbothraman $local_walsh_t;
	}
@end

@inline odfWalsh7(local_walsh_t,local_nrep,local_raman_df)
	//check that freq of permantly detuned DDS is set
	inline setddsf(ddssfdf, sf_f0+sf_pulseOff_df, 0);
	block repeat($local_nrep)
	{
		inline setddsf(ddsramdf,raman_f210+$local_raman_df/1000,0);
		pulse swbothraman $local_walsh_t;
		inline setddsf(ddsramdf,raman_f210+$local_raman_df/1000,Pi);
		pulse swbothraman 2*$local_walsh_t;
		inline setddsf(ddsramdf,raman_f210+$local_raman_df/1000,0);
		pulse swbothraman $local_walsh_t;
		inline setddsf(ddsramdf,raman_f210+$local_raman_df/1000,Pi);
		pulse swbothraman $local_walsh_t;
		inline setddsf(ddsramdf,raman_f210+$local_raman_df/1000,0);
		pulse swbothraman 2*$local_walsh_t;
		inline setddsf(ddsramdf,raman_f210+$local_raman_df/1000,Pi);
		pulse swbothraman $local_walsh_t;
	}
@end

@inline odfWalsh14(local_walsh_t,local_nrep,local_raman_df)
	//check that freq of permantly detuned DDS is set
	inline setddsf(ddssfdf, sf_f0+sf_pulseOff_df, 0);
	block repeat($local_nrep)
	{
		inline setddsf(ddsramdf,raman_f210+$local_raman_df/1000,0);
		pulse swbothraman $local_walsh_t;
		inline setddsf(ddsramdf,raman_f210+$local_raman_df/1000,Pi);
		pulse swbothraman 2*$local_walsh_t;
		inline setddsf(ddsramdf,raman_f210+$local_raman_df/1000,0);
		pulse swbothraman $local_walsh_t;
		inline setddsf(ddsramdf,raman_f210+$local_raman_df/1000,Pi);
		pulse swbothraman $local_walsh_t;
		inline setddsf(ddsramdf,raman_f210+$local_raman_df/1000,0);
		pulse swbothraman 2*$local_walsh_t;
		inline setddsf(ddsramdf,raman_f210+$local_raman_df/1000,Pi);
		pulse swbothraman $local_walsh_t;
		inline setddsf(ddsramdf,raman_f210+$local_raman_df/1000,0);
		pulse swbothraman $local_walsh_t;
		inline setddsf(ddsramdf,raman_f210+$local_raman_df/1000,Pi);
		pulse swbothraman 2*$local_walsh_t;
		inline setddsf(ddsramdf,raman_f210+$local_raman_df/1000,0);
		pulse swbothraman $local_walsh_t;
		inline setddsf(ddsramdf,raman_f210+$local_raman_df/1000,Pi);
		pulse swbothraman $local_walsh_t;
		inline setddsf(ddsramdf,raman_f210+$local_raman_df/1000,0);
		pulse swbothraman 2*$local_walsh_t;
		inline setddsf(ddsramdf,raman_f210+$local_raman_df/1000,Pi);
		pulse swbothraman $local_walsh_t;

	}
@end

@inline odfWalsh15(local_walsh_t,local_nrep,local_raman_df)
	//check that freq of permantly detuned DDS is set
	inline setddsf(ddssfdf, sf_f0+sf_pulseOff_df, 0);
	block repeat($local_nrep)
	{
		inline setddsf(ddsramdf,raman_f210+$local_raman_df/1000,0);
		pulse swbothraman $local_walsh_t;
		inline setddsf(ddsramdf,raman_f210+$local_raman_df/1000,Pi);
		pulse swbothraman 2*$local_walsh_t;
		inline setddsf(ddsramdf,raman_f210+$local_raman_df/1000,0);
		pulse swbothraman $local_walsh_t;
		inline setddsf(ddsramdf,raman_f210+$local_raman_df/1000,Pi);
		pulse swbothraman $local_walsh_t;
		inline setddsf(ddsramdf,raman_f210+$local_raman_df/1000,0);
		pulse swbothraman 2*$local_walsh_t;
		inline setddsf(ddsramdf,raman_f210+$local_raman_df/1000,Pi);
		pulse swbothraman $local_walsh_t;
		inline setddsf(ddsramdf,raman_f210+$local_raman_df/1000,Pi);
		pulse swbothraman $local_walsh_t;
		inline setddsf(ddsramdf,raman_f210+$local_raman_df/1000,0);
		pulse swbothraman 2*$local_walsh_t;
		inline setddsf(ddsramdf,raman_f210+$local_raman_df/1000,Pi);
		pulse swbothraman $local_walsh_t;
		inline setddsf(ddsramdf,raman_f210+$local_raman_df/1000,0);
		pulse swbothraman $local_walsh_t;
		inline setddsf(ddsramdf,raman_f210+$local_raman_df/1000,Pi);
		pulse swbothraman 2*$local_walsh_t;
		inline setddsf(ddsramdf,raman_f210+$local_raman_df/1000,0);
		pulse swbothraman $local_walsh_t;


	}
@end

//ODF using "walsh" spin echo
@inline odfWalshCOMbyTime(local_tarm,local_nrep,local_ndet)
	//check that freq of permantly detuned DDS is set
	inline setddsf(ddssfdf, sf_f0+sf_pulseOff_df, 0);
	var local_odf_armt = $local_tarm/$local_nrep/2.0;
	block repeat($local_nrep)
	{
		inline setddsf(ddsramdf,raman_f210+raman_fz/1000+$local_ndet/local_odf_armt,0);
		pulse swbothraman local_odf_armt;
		inline setddsf(ddsramdf,raman_f210+raman_fz/1000+$local_ndet/local_odf_armt,3.14159);
		pulse swbothraman local_odf_armt;
	}
@end

@inline strobeCoolingRamp()
var narb = 300;
var timearb = 0.2;
block repeat(narb)
	{
		pulse ttl8 timearb;
		pulse nopulse timearb;
	}
	pulse nopulse 2*timearb*narb;
@end

@inline quantarSync(expname, duration, pval)
	pulse ttl15 on; //and'd with photon signals from Quantar mainframe
	pulse bd 200e3;
	pulse ttl15 off;
	pulse bdrd 9e3;
	pulse ttl15 on;
	pulse bd 180e3;
	pulse ttl15 off;
	pulse rd 7e3;
	//%predriverwait quantar exp_ping;
	//%predriverwait quantar exp_start expcode`$expname`;
	//%predriver quantar exp_detect predet `2.0` nopname `-1`;
	//%driverwait quantar exp_detect detexp `$duration` nopname `$pval`;

	//reset all spins to up

	//cool and detect fluorescence

	//%driverwait quantar exp_detect detcool `$duration` nopname `$pval`;
	//%postdriverwait quantar exp_stop;
@end

///////////////////////////////////////
////////// COMPOSITE PULSES ///////////
///////////////////////////////////////

//This performs a composite pi/2 pulse that is more insensitive to 124 GHz inhomogeneity
// This performs the 'A' 90(0) 180(105) 180(315) pulse
// MUST SHIFT ALL SUBSEQUENT PULSES BY +60 DEGREES (1.0472 RAD)

//fix dt errors
@inline compPio2Adt1(phase_offset)
	var my_phase_offset = $phase_offset;
	inline sfPulseNoDet(sf_f0,sf_pio2,0+my_phase_offset);
	inline sfPulseNoDet(sf_f0,180/180*sf_pi,105/180*Pi+my_phase_offset);
	inline sfPulseNoDet(sf_f0,180/180*sf_pi,315/180*Pi+my_phase_offset);
	// all subsequent experiments need a phase advance (sigma_z) of 60/180*Pi
@end
//fix dt errors, higher order insensitivity to dt errors
@inline compPio2Adt2(phase_offset)
	var my_phase_offset = $phase_offset;
	inline sfPulseNoDet(sf_f0,270/180*sf_pi,0*Pi+my_phase_offset);
	inline sfPulseNoDet(sf_f0,360/180*sf_pi,169*Pi/180+my_phase_offset);
	inline sfPulseNoDet(sf_f0,180/180*sf_pi,51*Pi+my_phase_offset);
	inline sfPulseNoDet(sf_f0,180/180*sf_pi,178*Pi+my_phase_offset);
	// all subsequent experiments need a phase advance (sigma_z) of -70/180*Pi
@end

//fix df errors
@inline compPio2Adf1()
	inline sfPulse(sf_f0,385/180*sf_pi,0);
	inline sfPulse(sf_f0,320/180*sf_pi,Pi);
	inline sfPulse(sf_f0,25/180*sf_pi,0);
@end

//fix df errors
@inline compPiBdf1(phi)
	inline sfPulse(sf_f0,90/180*sf_pi,0+$phi);
	inline sfPulse(sf_f0,180/180*sf_pi,Pi+$phi);
	inline sfPulse(sf_f0,270/180*sf_pi,0+$phi);
@end

//translates df errors into sigma_z rotation errors
@inline compPio2B3df1()
	inline sfPulse(sf_f0,360/180*sf_pi,0);
	inline sfPulse(sf_f0,270/180*sf_pi,Pi);
	inline sfPulse(sf_f0,90/180*sf_pi,Pi/2);
@end

